PCA1,PCA2,label,sentence
0.030652067,0.01733355,grammatical_code,"def f(name): return f""Hello, {name}!"""
0.06619365,0.038155336,grammatical_code,"def f(a, b): return a + b"
0.065235056,0.033625375,grammatical_code,"def f(a, b): return a - b"
0.064656675,0.038642135,grammatical_code,"def f(a, b): return a * b"
-0.020504441,0.04101141,grammatical_code,"def f(a, b): return a / b if b != 0 else 0"
0.030042598,0.06140385,grammatical_code,"def f(base, exponent): return base ** exponent"
0.039587375,0.07404485,grammatical_code,def f(number): return number % 2 == 0
0.027682904,0.0677357,grammatical_code,def f(number): return number % 2 != 0
0.040085774,0.052612834,grammatical_code,def f(iterable): return len(iterable)
-0.1090074,0.10313608,grammatical_code,def f(list_obj): return list_obj[0] if list_obj else None
-0.11661874,0.09978091,grammatical_code,def f(list_obj): return list_obj[-1] if list_obj else None
0.043754943,0.032338534,grammatical_code,def f(text): return text.capitalize()
0.046968296,0.04362323,grammatical_code,def f(text): return text.lower()
0.049078118,0.045049883,grammatical_code,def f(text): return text.upper()
0.051990915,0.034542914,grammatical_code,def f(text): return text[::-1]
0.02593443,0.027248384,grammatical_code,"def f(str1, str2): return str1 + str2"
0.00040561188,0.045574594,grammatical_code,"def f(start, end): return list(range(start, end))"
-0.03111426,0.07134079,grammatical_code,def f(numbers): return max(numbers) if numbers else None
-0.029211275,0.07147939,grammatical_code,def f(numbers): return min(numbers) if numbers else None
0.045214407,0.069316655,grammatical_code,def f(numbers): return sum(numbers)
-0.07190381,0.057435106,grammatical_code,def f(numbers): return sum(numbers) / len(numbers) if numbers else 0
-0.042032186,0.09649285,grammatical_code,"def f(element, list_obj): return element in list_obj"
-0.038974266,0.08356929,grammatical_code,"def f(list_obj, element): return list_obj + [element]"
-0.105407566,0.0933314,grammatical_code,"def f(list_obj, element): return [item for item in list_obj if item != element]"
-0.038465552,0.07343605,grammatical_code,def f(list_obj): return list(set(list_obj))
0.028151173,0.04093723,grammatical_code,"def f(key, value): return {key: value}"
-0.029236792,0.058442388,grammatical_code,"def f(dict_obj, key): return dict_obj.get(key)"
-0.09043943,0.0092538865,grammatical_code,"def f(dict_obj, key, value): new_dict = dict_obj.copy(); new_dict[key] = value; return new_dict"
-0.023711016,0.0414624,grammatical_code,def f(dict_obj): return list(dict_obj.keys())
-0.026592523,0.050070826,grammatical_code,def f(dict_obj): return list(dict_obj.values())
-0.015153082,0.08959819,grammatical_code,def f(list_obj): return not list_obj
0.05506231,0.058463074,grammatical_code,def f(text): return not text
0.009386232,0.06177206,grammatical_code,def f(dict_obj): return not dict_obj
-0.055385556,0.08801306,grammatical_code,"def f(list_obj, element): return list_obj.count(element)"
-0.03291072,0.089114636,grammatical_code,def f(list_obj): return sorted(list_obj)
-0.069942236,0.066797115,grammatical_code,"def f(list_obj): return sorted(list_obj, reverse=True)"
0.07970309,0.03814601,grammatical_code,def f(): return True
0.07914832,0.043515824,grammatical_code,def f(): return False
0.04856096,0.06207833,grammatical_code,def f(number): return abs(number)
-0.005803456,0.036497317,grammatical_code,"def f(number, decimals=0): return round(number, decimals)"
-0.029642673,0.033801977,grammatical_code,"def f(a, b): return a // b if b != 0 else 0"
-0.020990161,0.047923245,grammatical_code,"def f(a, b): return a % b if b != 0 else 0"
0.063985005,0.04009613,grammatical_code,"def f(a, b): return a and b"
0.062701106,0.044747606,grammatical_code,"def f(a, b): return a or b"
0.08066441,0.029102728,grammatical_code,def f(a): return not a
0.056629404,0.04203145,grammatical_code,"def f(a, b): return a == b"
0.050242182,0.033767413,grammatical_code,"def f(a, b): return a != b"
0.06496184,0.044520665,grammatical_code,"def f(a, b): return a > b"
0.06396829,0.041632436,grammatical_code,"def f(a, b): return a < b"
0.056174856,0.036395237,grammatical_code,"def f(a, b): return a >= b"
0.055203643,0.03444622,grammatical_code,"def f(a, b): return a <= b"
0.03840436,0.06599952,grammatical_code,def f(obj): return type(obj)
-0.10680036,-0.03728426,grammatical_code,"def f(value): return int(value) if isinstance(value, (int, float, str)) and str(value).replace('.', '', 1).isdigit() else 0"
-0.10868737,-0.03930285,grammatical_code,"def f(value): return float(value) if isinstance(value, (int, float, str)) and str(value).replace('.', '', 1).isdigit() else 0.0"
0.038645394,0.06552798,grammatical_code,def f(value): return str(value)
-0.022479596,0.027943453,grammatical_code,"def f(items, separator=""""): return separator.join(items)"
-0.012384492,0.028427407,grammatical_code,"def f(text, separator="" ""): return text.split(separator)"
0.045655813,0.03959612,grammatical_code,def f(text): return text.strip()
0.009718125,0.054091457,grammatical_code,"def f(text, prefix): return text.startswith(prefix)"
0.009595632,0.052321654,grammatical_code,"def f(text, suffix): return text.endswith(suffix)"
0.0072416486,0.05892396,grammatical_code,"def f(text, substring): return substring in text"
-0.003003051,0.045799308,grammatical_code,"def f(text, old, new): return text.replace(old, new)"
0.006968136,0.058644805,grammatical_code,def f(numbers): return [n*n for n in numbers]
-0.032855302,0.04462449,grammatical_code,def f(numbers): return [n for n in numbers if n % 2 == 0]
0.004459282,0.037835304,grammatical_code,"def f(keys, values): return dict(zip(keys, values))"
-0.018257316,0.041232698,grammatical_code,def f(dict_obj): return list(dict_obj.items())
-0.01242056,0.0763353,grammatical_code,def f(list_obj): return list_obj[:]
-0.0039044898,0.042283405,grammatical_code,def f(dict_obj): return dict_obj.copy()
0.03736986,0.055547725,grammatical_code,def f(booleans): return all(booleans)
0.032821566,0.058219656,grammatical_code,def f(booleans): return any(booleans)
-0.010049459,0.056339324,grammatical_code,def f(numbers): return [n for n in numbers if n > 0]
-0.009439288,0.056499764,grammatical_code,def f(numbers): return [n for n in numbers if n < 0]
0.071093634,0.066549465,grammatical_code,def f(number): return number + 1
0.07381694,0.059030887,grammatical_code,def f(number): return number - 1
-0.13715732,0.0977015,grammatical_code,"def f(list_obj, element): return list_obj.index(element) if element in list_obj else -1"
-0.15580228,0.0032051855,grammatical_code,"def f(list_obj, index1, index2): new_list = list_obj[:]; (new_list[index1], new_list[index2]) = (new_list[index2], new_list[index1]) if 0 <= index1 < len(new_list) and 0 <= index2 < len(new_list) else (0,0) ; return new_list if 0 <= index1 < len(list_obj) and 0 <= index2 < len(list_obj) else list_obj"
-0.08110015,0.013467092,grammatical_code,"def f(text): vowels = ""aeiouAEIOU""; return sum(1 for char in text if char in vowels)"
-0.100287594,0.0054479036,grammatical_code,"def f(text): vowels = ""aeiouAEIOU""; return sum(1 for char in text if char.isalpha() and char not in vowels)"
-0.12802744,-0.028215721,grammatical_code,"def f(text): cleaned_text = """".join(char.lower() for char in text if char.isalnum()); return cleaned_text == cleaned_text[::-1]"
-0.10913635,0.030606182,grammatical_code,"def f(list_obj): return [list_obj[i] for i in range(0, len(list_obj), 2)]"
-0.10968329,0.03020999,grammatical_code,"def f(list_obj): return [list_obj[i] for i in range(1, len(list_obj), 2)]"
-0.06825308,0.02980629,grammatical_code,def f(number): return sum(int(digit) for digit in str(abs(number)))
-0.02317469,0.07150745,grammatical_code,def f(list_obj): return list_obj[::-1]
-0.07003456,-0.013977494,grammatical_code,"def f(text): return """".join(sorted(set(text), key=text.index))"
-0.111756146,-0.03799579,grammatical_code,"def f(n_terms): fib = [0, 1]; return fib[:n_terms] if n_terms <= 2 else [fib.append(fib[-1] + fib[-2]) or x for x in range(n_terms - 2)] and fib"
-0.013113847,-0.0016691434,grammatical_code,def f(n): return 1 if n <= 0 else n * f(n - 1)
0.04965097,0.01360053,grammatical_code,def f(celsius): return (celsius * 9/5) + 32
0.048926346,-0.018265093,grammatical_code,def f(fahrenheit): return (fahrenheit - 32) * 5/9
-0.10214894,0.010673761,grammatical_code,"def f(text, max_length): return text[:max_length] + ""..."" if len(text) > max_length else text"
-0.0067915814,-0.022142963,grammatical_code,def f(): import datetime; return datetime.datetime.now().year
-0.010282191,-0.025865164,grammatical_code,def f(): import datetime; return datetime.datetime.now().month
-0.011157294,-0.023313345,grammatical_code,def f(): import datetime; return datetime.datetime.now().day
-0.036782444,-0.008538951,grammatical_code,def f(year): return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
0.006773446,0.055957213,grammatical_code,"def f(list1, list2): return list1 + list2"
-0.024338108,0.041400284,grammatical_code,"def f(set1, set2): return list(set1.intersection(set2))"
-0.01652662,0.036580183,grammatical_code,"def f(set1, set2): return list(set1.union(set2))"
-0.0901506,0.095268324,grammatical_code,def f(list_obj): return [item for item in list_obj if item is not None]
-0.08623291,0.023510214,grammatical_code,"def f(text, index): return text[index] if 0 <= index < len(text) else """""
0.046898354,0.051100653,grammatical_code,def f(text): return list(text)
-0.14677872,0.07192192,grammatical_code,def f(list_obj): return list_obj[len(list_obj)//2] if list_obj else None
0.03626454,0.04085658,grammatical_code,def f(text): return text.isdigit()
0.046783995,0.0388311,grammatical_code,def f(text): return text.isalpha()
0.020638216,0.020705925,grammatical_code,def f(text): return len(text.split())
-0.08819586,-0.01139845,grammatical_code,"def f(text): return """".join(char for char in text if char.lower() not in ""aeiou"")"
-0.02596924,0.078635566,grammatical_code,def f(list_obj): return tuple(list_obj)
-0.0132917585,0.061934438,grammatical_code,def f(tuple_obj): return list(tuple_obj)
0.03693767,0.054938834,grammatical_code,def f(iterable): return set(iterable)
-0.053148683,0.043468304,grammatical_code,"def f(list1, list2): return list(set(list1) | set(list2))"
-0.04708355,0.048156198,grammatical_code,"def f(list1, list2): return list(set(list1) & set(list2))"
-0.042142473,0.044397097,grammatical_code,"def f(list1, list2): return list(set(list1) - set(list2))"
-0.054124225,0.042018414,grammatical_code,"def f(list1, list2): return list(set(list1) ^ set(list2))"
-0.008654607,0.04524774,grammatical_code,"def f(set1, set2): return set1.issubset(set2)"
-0.009751735,0.040402073,grammatical_code,"def f(set1, set2): return set1.issuperset(set2)"
-0.03554321,-0.0185774,grammatical_code,"def f(text): return "" "".join(text.split()[::-1])"
-0.027612641,0.06358488,grammatical_code,"def f(list_obj, n): return list_obj[:n]"
-0.027295133,0.066751294,grammatical_code,"def f(list_obj, n): return list_obj[-n:]"
-0.029326573,0.056282338,grammatical_code,def f(iterable): return [item for item in iterable if item is not None]
-0.07896635,0.05246181,grammatical_code,"def f(iterable, data_type): return [item for item in iterable if isinstance(item, data_type)]"
-0.061548125,0.044894423,grammatical_code,def f(numbers): return sum(n for n in numbers if n % 2 == 0)
-0.064295836,0.03258739,grammatical_code,def f(numbers): return sum(n for n in numbers if n % 2 != 0)
-0.060743317,-0.0055406997,grammatical_code,def f(numbers): res = 1; [res := res * n for n in numbers]; return res
-0.032855302,0.04462449,grammatical_code,def f(numbers): return [n for n in numbers if n % 2 == 0]
-0.036096793,0.030465543,grammatical_code,def f(numbers): return [n for n in numbers if n % 2 != 0]
-0.060190197,0.04961165,grammatical_code,def f(booleans): return sum(1 for b in booleans if b is True)
-0.061815947,0.048981886,grammatical_code,def f(booleans): return sum(1 for b in booleans if b is False)
-0.044173945,0.01502832,grammatical_code,"def f(amount, currency_symbol=""$""): return f""{currency_symbol}{amount:.2f}"""
0.03382288,0.033369023,grammatical_code,"def f(minutes): return minutes // 60, minutes % 60"
0.08002849,0.048427794,grammatical_code,def f(hours): return hours * 60
-0.10234359,-0.015993057,grammatical_code,"def f(filename): return filename.split(""."")[-1] if ""."" in filename else """""
-0.1235854,-0.031829137,grammatical_code,"def f(filename): return ""."".join(filename.split(""."")[:-1]) if ""."" in filename else filename"
0.06525279,0.06811721,grammatical_code,def f(number): return number > 0
0.062407404,0.066787705,grammatical_code,def f(number): return number < 0
0.05749592,0.069121405,grammatical_code,def f(number): return number == 0
-0.03387282,0.017313158,grammatical_code,"def f(min_val, max_val): import random; return random.randint(min_val, max_val)"
-0.025247306,0.016704481,grammatical_code,"def f(min_val, max_val): import random; return random.uniform(min_val, max_val)"
-0.13051228,0.06320087,grammatical_code,def f(list_obj): import random; return random.choice(list_obj) if list_obj else None
-0.13576911,-0.011603307,grammatical_code,def f(list_obj): import random; new_list = list_obj[:]; random.shuffle(new_list); return new_list
-0.12417891,-0.025672449,grammatical_code,"def f(length): import random, string; return ''.join(random.choice(string.ascii_letters) for _ in range(length))"
-0.07289645,0.033303797,grammatical_code,"def f(weight_kg, height_m): return weight_kg / (height_m ** 2) if height_m > 0 else 0"
0.07196059,0.041379493,grammatical_code,def f(kg): return kg * 2.20462
0.06403949,0.041147735,grammatical_code,def f(pounds): return pounds / 2.20462
0.08307358,0.04226404,grammatical_code,def f(cm): return cm / 2.54
0.06738561,0.04443425,grammatical_code,def f(inches): return inches * 2.54
0.040600415,0.04245671,grammatical_code,"def f(price, percentage): return price * (1 - percentage / 100)"
-0.055194035,0.037552115,grammatical_code,"def f(value, total): return (value / total) * 100 if total != 0 else 0"
-0.036782444,-0.008538951,grammatical_code,def f(year): return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
-0.0615138,-0.018553942,grammatical_code,"def f(year, month, day): import datetime; return datetime.date(year, month, day).strftime(""%A"")"
-0.08754456,-0.041574918,grammatical_code,"def f(year1, month1, day1, year2, month2, day2): import datetime; date1 = datetime.date(year1, month1, day1); date2 = datetime.date(year2, month2, day2); return abs((date2 - date1).days)"
-0.04885948,-0.05654564,grammatical_code,"def f(text): import re; return re.sub(r'<[^>]+>', '', text)"
-0.09236621,-0.08132996,grammatical_code,"def f(email): import re; return re.match(r""[^@]+@[^@]+.[^@]+"", email) is not None"
-0.072651446,-0.09284282,grammatical_code,"def f(text): import re; text = text.lower(); text = re.sub(r'[^a-z0-9\s-]', '', text); text = re.sub(r'\s+', '-', text); return text.strip('-')"
-0.09443696,-0.0046678637,grammatical_code,"def f(text, sub): return [i for i in range(len(text)) if text.startswith(sub, i)]"
0.041737285,0.036056153,grammatical_code,def f(text): return text.swapcase()
0.04231199,0.033571877,grammatical_code,def f(text): return text.istitle()
0.039166186,0.04090802,grammatical_code,def f(text): return text.isalnum()
0.036802292,0.044645373,grammatical_code,def f(text): return text.isdecimal()
0.046249975,0.036041074,grammatical_code,def f(text): return text.isspace()
0.041552037,0.0317894,grammatical_code,def f(text): return text.isprintable()
-0.042166132,0.010438887,grammatical_code,def f(text): return all(c.isalpha() for c in text)
-0.05000604,0.0127679035,grammatical_code,def f(text): return all(c.isdigit() for c in text)
-0.08412289,-0.049469702,grammatical_code,"def f(number_str): import re; return re.sub(r'(\d{3})(\d{3})(\d{4})', r'(\1) \2-\3', number_str)"
-0.06343434,-0.01067311,grammatical_code,def f(n): return int(str(abs(n))[::-1]) * (-1 if n < 0 else 1)
-0.032504287,0.05614897,grammatical_code,def f(numbers): return sum(n * n for n in numbers)
-0.07494358,-0.015477971,grammatical_code,def f(numbers): res = 1; [res := res * (n * n) for n in numbers]; return res
-0.13289328,-0.028668866,grammatical_code,"def f(strings): return """".join(char[0] for char in zip(*strings) if all(c == char[0] for c in char))"
-0.13273229,-0.05218084,grammatical_code,def f(words): from collections import defaultdict; d = defaultdict(list); [d[word[0].lower()].append(word) for word in words if word]; return dict(d)
-0.12146905,0.027379867,grammatical_code,"def f(list_obj, size): return [list_obj[i:i + size] for i in range(0, len(list_obj), size)]"
-0.06839084,0.076567486,grammatical_code,def f(list_of_lists): return [item for sublist in list_of_lists for item in sublist]
-0.12647666,-0.027422737,grammatical_code,"def f(matrix): return ([matrix[i][i] for i in range(len(matrix))], [matrix[i][len(matrix)-1-i] for i in range(len(matrix))]) if matrix else ([], [])"
-0.09068048,0.024851784,grammatical_code,def f(matrix): return [list(row) for row in zip(*matrix)] if matrix else []
-0.11070616,-0.0010061088,grammatical_code,"def f(vec1, vec2): return sum(x * y for x,y in zip(vec1, vec2)) if len(vec1)==len(vec2) else 0"
-0.054343883,-0.03525069,grammatical_code,"def f(n): a, b = 0, 1; [a := b, b := a + b for _ in range(n)]; return a"
-0.08481933,-0.03130627,grammatical_code,"def f(n): return sum(1 for i in range(2, n + 1) if all(i % j != 0 for j in range(2, int(i**0.5) + 1)))"
-0.15665366,0.06324263,grammatical_code,"def f(list_obj): return max(set(list_obj), key=list_obj.count) if list_obj else None"
-0.15521906,0.061240494,grammatical_code,"def f(list_obj): return min(set(list_obj), key=list_obj.count) if list_obj else None"
-0.12933105,0.027203206,grammatical_code,"def f(numbers): return sorted(list(set(numbers)), reverse=True)[1] if len(set(numbers)) > 1 else None"
-0.13314049,0.031827718,grammatical_code,def f(numbers): return sorted(list(set(numbers)))[1] if len(set(numbers)) > 1 else None
-0.023932884,-0.021272965,grammatical_code,def f(n): return n >= 0 and int(n**0.5)**2 == n
-0.09349519,-0.00016111278,grammatical_code,def f(n): return sum(int(digit)**len(str(n)) for digit in str(n)) == n
-0.030855129,-0.005662084,grammatical_code,def f(nums): n = len(nums) + 1; return n*(n+1)//2 - sum(nums)
-0.05791063,0.009211423,grammatical_code,"def f(str1, str2): return sorted(str1.lower()) == sorted(str2.lower())"
-0.046312287,-0.017914891,grammatical_code,"def f(text): return "" "".join(dict.fromkeys(text.split()))"
-0.08455598,-0.018640548,grammatical_code,"def f(name): return """".join(word[0].upper() for word in name.split())"
-0.115763366,-0.049020458,grammatical_code,def f(text): balance = 0; return all((balance := balance + (1 if char == '(' else -1 if char == ')' else 0)) >= 0 for char in text) and balance == 0
0.050332364,0.043879077,grammatical_code,"def f(amount, rate): return amount * (rate / 100)"
0.041789673,0.035536353,grammatical_code,"def f(amount, rate): return amount * (1 + rate / 100)"
-0.018257316,0.041232698,grammatical_code,def f(dict_obj): return list(dict_obj.items())
-0.030472653,0.06769168,grammatical_code,def f(list_of_tuples): return dict(list_of_tuples)
-0.13715732,0.0977015,grammatical_code,"def f(list_obj, element): return list_obj.index(element) if element in list_obj else -1"
-0.032855302,0.04462449,grammatical_code,def f(numbers): return [n for n in numbers if n % 2 == 0]
-0.036096793,0.030465543,grammatical_code,def f(numbers): return [n for n in numbers if n % 2 != 0]
-0.060190197,0.04961165,grammatical_code,def f(booleans): return sum(1 for b in booleans if b is True)
-0.061815947,0.048981886,grammatical_code,def f(booleans): return sum(1 for b in booleans if b is False)
-0.044173945,0.01502832,grammatical_code,"def f(amount, currency_symbol=""$""): return f""{currency_symbol}{amount:.2f}"""
0.03382288,0.033369023,grammatical_code,"def f(minutes): return minutes // 60, minutes % 60"
0.08002849,0.048427794,grammatical_code,def f(hours): return hours * 60
-0.10234359,-0.015993057,grammatical_code,"def f(filename): return filename.split(""."")[-1] if ""."" in filename else """""
-0.1235854,-0.031829137,grammatical_code,"def f(filename): return ""."".join(filename.split(""."")[:-1]) if ""."" in filename else filename"
0.06525279,0.06811721,grammatical_code,def f(number): return number > 0
0.062407404,0.066787705,grammatical_code,def f(number): return number < 0
0.05749592,0.069121405,grammatical_code,def f(number): return number == 0
-0.03387282,0.017313158,grammatical_code,"def f(min_val, max_val): import random; return random.randint(min_val, max_val)"
-0.025247306,0.016704481,grammatical_code,"def f(min_val, max_val): import random; return random.uniform(min_val, max_val)"
-0.13051228,0.06320087,grammatical_code,def f(list_obj): import random; return random.choice(list_obj) if list_obj else None
-0.13576911,-0.011603307,grammatical_code,def f(list_obj): import random; new_list = list_obj[:]; random.shuffle(new_list); return new_list
-0.12417891,-0.025672449,grammatical_code,"def f(length): import random, string; return ''.join(random.choice(string.ascii_letters) for _ in range(length))"
-0.07289645,0.033303797,grammatical_code,"def f(weight_kg, height_m): return weight_kg / (height_m ** 2) if height_m > 0 else 0"
0.07196059,0.041379493,grammatical_code,def f(kg): return kg * 2.20462
0.06403949,0.041147735,grammatical_code,def f(pounds): return pounds / 2.20462
0.08307358,0.04226404,grammatical_code,def f(cm): return cm / 2.54
0.06738561,0.04443425,grammatical_code,def f(inches): return inches * 2.54
0.040600415,0.04245671,grammatical_code,"def f(price, percentage): return price * (1 - percentage / 100)"
-0.055194035,0.037552115,grammatical_code,"def f(value, total): return (value / total) * 100 if total != 0 else 0"
-0.036782444,-0.008538951,grammatical_code,def f(year): return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
-0.0615138,-0.018553942,grammatical_code,"def f(year, month, day): import datetime; return datetime.date(year, month, day).strftime(""%A"")"
-0.08754456,-0.041574918,grammatical_code,"def f(year1, month1, day1, year2, month2, day2): import datetime; date1 = datetime.date(year1, month1, day1); date2 = datetime.date(year2, month2, day2); return abs((date2 - date1).days)"
-0.04885948,-0.05654564,grammatical_code,"def f(text): import re; return re.sub(r'<[^>]+>', '', text)"
-0.09236621,-0.08132996,grammatical_code,"def f(email): import re; return re.match(r""[^@]+@[^@]+.[^@]+"", email) is not None"
-0.072651446,-0.09284282,grammatical_code,"def f(text): import re; text = text.lower(); text = re.sub(r'[^a-z0-9\s-]', '', text); text = re.sub(r'\s+', '-', text); return text.strip('-')"
-0.09443696,-0.0046678637,grammatical_code,"def f(text, sub): return [i for i in range(len(text)) if text.startswith(sub, i)]"
0.041737285,0.036056153,grammatical_code,def f(text): return text.swapcase()
0.04231199,0.033571877,grammatical_code,def f(text): return text.istitle()
0.039166186,0.04090802,grammatical_code,def f(text): return text.isalnum()
0.036802292,0.044645373,grammatical_code,def f(text): return text.isdecimal()
0.046249975,0.036041074,grammatical_code,def f(text): return text.isspace()
0.041552037,0.0317894,grammatical_code,def f(text): return text.isprintable()
-0.042166132,0.010438887,grammatical_code,def f(text): return all(c.isalpha() for c in text)
-0.05000604,0.0127679035,grammatical_code,def f(text): return all(c.isdigit() for c in text)
-0.08412289,-0.049469702,grammatical_code,"def f(number_str): import re; return re.sub(r'(\d{3})(\d{3})(\d{4})', r'(\1) \2-\3', number_str)"
-0.06343434,-0.01067311,grammatical_code,def f(n): return int(str(abs(n))[::-1]) * (-1 if n < 0 else 1)
-0.032504287,0.05614897,grammatical_code,def f(numbers): return sum(n * n for n in numbers)
-0.07494358,-0.015477971,grammatical_code,def f(numbers): res = 1; [res := res * (n * n) for n in numbers]; return res
-0.13289328,-0.028668866,grammatical_code,"def f(strings): return """".join(char[0] for char in zip(*strings) if all(c == char[0] for c in char))"
-0.13273229,-0.05218084,grammatical_code,def f(words): from collections import defaultdict; d = defaultdict(list); [d[word[0].lower()].append(word) for word in words if word]; return dict(d)
-0.12146905,0.027379867,grammatical_code,"def f(list_obj, size): return [list_obj[i:i + size] for i in range(0, len(list_obj), size)]"
-0.06839084,0.076567486,grammatical_code,def f(list_of_lists): return [item for sublist in list_of_lists for item in sublist]
-0.12647666,-0.027422737,grammatical_code,"def f(matrix): return ([matrix[i][i] for i in range(len(matrix))], [matrix[i][len(matrix)-1-i] for i in range(len(matrix))]) if matrix else ([], [])"
-0.09068048,0.024851784,grammatical_code,def f(matrix): return [list(row) for row in zip(*matrix)] if matrix else []
-0.11070616,-0.0010061088,grammatical_code,"def f(vec1, vec2): return sum(x * y for x,y in zip(vec1, vec2)) if len(vec1)==len(vec2) else 0"
-0.054343883,-0.03525069,grammatical_code,"def f(n): a, b = 0, 1; [a := b, b := a + b for _ in range(n)]; return a"
-0.08481933,-0.03130627,grammatical_code,"def f(n): return sum(1 for i in range(2, n + 1) if all(i % j != 0 for j in range(2, int(i**0.5) + 1)))"
-0.15665366,0.06324263,grammatical_code,"def f(list_obj): return max(set(list_obj), key=list_obj.count) if list_obj else None"
-0.15521906,0.061240494,grammatical_code,"def f(list_obj): return min(set(list_obj), key=list_obj.count) if list_obj else None"
-0.12933105,0.027203206,grammatical_code,"def f(numbers): return sorted(list(set(numbers)), reverse=True)[1] if len(set(numbers)) > 1 else None"
-0.13314049,0.031827718,grammatical_code,def f(numbers): return sorted(list(set(numbers)))[1] if len(set(numbers)) > 1 else None
-0.023932884,-0.021272965,grammatical_code,def f(n): return n >= 0 and int(n**0.5)**2 == n
-0.09349519,-0.00016111278,grammatical_code,def f(n): return sum(int(digit)**len(str(n)) for digit in str(n)) == n
-0.030855129,-0.005662084,grammatical_code,def f(nums): n = len(nums) + 1; return n*(n+1)//2 - sum(nums)
-0.05791063,0.009211416,grammatical_code,"def f(str1, str2): return sorted(str1.lower()) == sorted(str2.lower())"
-0.046312284,-0.017914893,grammatical_code,"def f(text): return "" "".join(dict.fromkeys(text.split()))"
-0.084556006,-0.018640548,grammatical_code,"def f(name): return """".join(word[0].upper() for word in name.split())"
-0.115763344,-0.04902047,grammatical_code,def f(text): balance = 0; return all((balance := balance + (1 if char == '(' else -1 if char == ')' else 0)) >= 0 for char in text) and balance == 0
0.050332356,0.043879073,grammatical_code,"def f(amount, rate): return amount * (rate / 100)"
0.041789673,0.035536353,grammatical_code,"def f(amount, rate): return amount * (1 + rate / 100)"
-0.018257316,0.041232694,grammatical_code,def f(dict_obj): return list(dict_obj.items())
-0.030472653,0.06769168,grammatical_code,def f(list_of_tuples): return dict(list_of_tuples)
-0.13715732,0.0977015,grammatical_code,"def f(list_obj, element): return list_obj.index(element) if element in list_obj else -1"
-0.04501745,0.052668244,grammatical_code,def f(numbers): return sum(n for n in numbers if n > 0)
-0.047419492,0.055244256,grammatical_code,def f(numbers): return sum(n for n in numbers if n < 0)
0.047017295,0.039424438,grammatical_code,def f(text): return text.title()
0.032167025,0.04067787,grammatical_code,"def f(number): return f""{number:,}"""
0.02262632,0.021417439,grammatical_code,def f(text): return text.upper() == text
0.021904692,0.019750433,grammatical_code,def f(text): return text.lower() == text
0.008962422,0.013189027,grammatical_code,"def f(text): return text.count("" "") + 1"
-0.087651834,0.10095525,grammatical_code,def f(list_obj): return sum(1 for item in list_obj if item)
-0.08968911,0.10213521,grammatical_code,def f(list_obj): return sum(1 for item in list_obj if not item)
0.012962204,0.013201011,grammatical_code,"def f(text): return text.replace("" "", """")"
0.0064714896,0.048679933,grammatical_code,"def f(x, y): return x if x > y else y"
0.009111721,0.043664206,grammatical_code,"def f(x, y): return x if x < y else y"
0.030021748,0.006796402,grammatical_code,"def f(s): return s.strip() == """""
0.04805019,0.031066846,grammatical_code,def f(s): return s.isnumeric()
0.02249216,-0.0064709876,grammatical_code,"def f(s): return s.startswith(""http"")"
-0.059882898,-0.021647556,grammatical_code,def f(url): from urllib.parse import urlparse; return urlparse(url).hostname
0.019402223,0.046066187,grammatical_code,def f(text): return len(set(text))
0.015515667,0.029262053,grammatical_code,def f(n): return n % 2 == 0 and n > 0
0.0080954535,0.017906658,grammatical_code,def f(n): return n % 2 != 0 and n > 0
0.015437027,0.010297164,grammatical_code,"def f(text): return text.replace(""  "", "" "")"
0.039707694,0.051710352,grammatical_code,def f(items): return tuple(items)
0.044188403,0.059262656,grammatical_code,def f(items): return list(items)
0.060723096,0.02118262,grammatical_code,"def f(a, b): return (a, b)"
0.05541657,0.04182817,grammatical_code,def f(pair): return pair[0]
0.05889639,0.03851789,grammatical_code,def f(pair): return pair[1]
-0.02600038,0.07316746,grammatical_code,"def f(dict_obj, key): return key in dict_obj"
-0.03088595,0.08465763,grammatical_code,"def f(dict_obj, key): return key not in dict_obj"
0.049881827,0.05103468,grammatical_code,def f(number): return float(number)
-0.008297411,0.03840517,grammatical_code,def f(numbers): return [float(n) for n in numbers]
0.043358997,0.03883637,grammatical_code,def f(text): return text.isupper()
0.042170927,0.03098216,grammatical_code,def f(text): return text.islower()
0.03626454,0.04085658,grammatical_code,def f(text): return text.isdigit()
0.046783995,0.0388311,grammatical_code,def f(text): return text.isalpha()
-0.044585723,0.063656926,grammatical_code,def f(list_obj): return list_obj.clear() or []
-0.044605132,0.068707734,grammatical_code,"def f(list_obj, index): return list_obj.pop(index)"
-0.096271254,0.077298105,grammatical_code,"def f(list_obj, index): return list_obj.insert(index, None) or list_obj"
-0.15795782,0.09029863,grammatical_code,"def f(list_obj, element): return list_obj.remove(element) or list_obj if element in list_obj else list_obj"
-0.06481187,0.077525936,grammatical_code,def f(list_obj): return list_obj.reverse() or list_obj
-0.06989885,0.07928695,grammatical_code,def f(list_obj): return list_obj.sort() or list_obj
-0.10359144,0.055138465,grammatical_code,def f(list_obj): return list_obj.sort(reverse=True) or list_obj
-0.024074642,0.06313403,grammatical_code,def f(list_obj): return list_obj.copy()
-0.06508244,0.060757812,grammatical_code,"def f(dict_obj, other_dict): return dict_obj.update(other_dict) or dict_obj"
-0.03221257,0.05707205,grammatical_code,"def f(dict_obj, key): return dict_obj.pop(key)"
-0.03026718,0.056931466,grammatical_code,def f(dict_obj): return dict_obj.clear() or {}
-0.010210903,0.04649863,grammatical_code,def f(dict_obj): return dict_obj.popitem()
-0.061569363,0.07781898,grammatical_code,"def f(set_obj, element): return set_obj.add(element) or set_obj"
-0.13598688,0.0715347,grammatical_code,"def f(set_obj, element): return set_obj.remove(element) or set_obj if element in set_obj else set_obj"
-0.06992345,0.075127006,grammatical_code,"def f(set_obj, element): return set_obj.discard(element) or set_obj"
-0.04536895,0.056716308,grammatical_code,def f(set_obj): return set_obj.clear() or set()
-0.00406722,0.049658917,grammatical_code,"def f(set1, set2): return set1.difference(set2)"
-0.0051344773,0.043571014,grammatical_code,"def f(set1, set2): return set1.intersection(set2)"
-0.0024694323,0.041146856,grammatical_code,"def f(set1, set2): return set1.union(set2)"
-0.022316525,0.03518591,grammatical_code,"def f(set1, set2): return set1.symmetric_difference(set2)"
0.08650462,0.04968194,agrammar_code,def f(): return a / 0
-0.030690718,0.036533937,agrammar_code,def f(): return list_obj[len(list_obj)]
-0.004614869,0.0021929096,agrammar_code,def f(): return dict_obj['non_existent_key']
0.054894052,0.03234076,agrammar_code,def f(): return int(text)
0.037416518,0.035545237,agrammar_code,def f(): return undefined_function()
0.07239552,0.019847274,agrammar_code,def f(): return len(123)
0.026407994,-0.008724089,agrammar_code,def f(): text[0] = 'a'; return text
0.0347397,0.050044775,agrammar_code,def f(): return list_obj + 1
0.037822306,-0.014796098,agrammar_code,def f(): import nonexistent_module_xyz
-0.01630585,-0.05847366,agrammar_code,"def f(): with open(""nonexistent.txt"", ""r"") as f: f.read()"
-0.037156403,-0.06772753,agrammar_code,"def f(): with open(""/root/protected.txt"", ""w"") as f: f.write(""test"")"
-0.011212004,-0.06843302,agrammar_code,"def f(): import json; json.loads(""{'key': 'value'"")"
0.07466405,0.042007208,agrammar_code,def f(): return None + 1
0.04434359,0.017941182,agrammar_code,def f(): return 5.some_method()
0.068604454,-0.02766827,agrammar_code,"def f(): a, b = (1, 2, 3)"
0.043083217,0.035701983,agrammar_code,def f(): return unassigned_var
0.017178526,0.006039015,agrammar_code,def f(): return recursive_no_base_case()
0.025704682,-0.006542803,agrammar_code,def f(): return (i for i in range(10**100))
0.028436733,-0.06489027,agrammar_code,"def f(): s = frozenset([1, 2]); s.add(3)"
0.039468486,-0.04480907,agrammar_code,"def f(): import re; re.compile(""["")"
0.058765233,0.03304526,agrammar_code,def f(): return eval(code)
0.08504639,0.026424155,agrammar_code,def f(): return 10**1000
0.058885176,-0.0037159366,agrammar_code,def f(): return [0] * (10**100)
0.0085320305,-0.05308101,agrammar_code,"def f(): my_tuple = (1, 2); my_tuple[0] = 3"
-0.009762894,-0.071279004,agrammar_code,"def f(): f = open(""temp.txt"", ""w""); f.write(""data"")"
0.078080215,0.010271272,agrammar_code,def f(): import circular_a
0.037044194,-0.00919578,agrammar_code,def f(): print(non_existent_variable)
-0.0026971602,-0.0356305,agrammar_code,def f(): class MyClass: pass; MyClass.non_existent_attribute
0.0046988195,-0.044048354,agrammar_code,def f(): my_list = []; my_list.pop()
0.0054655573,-0.06226896,agrammar_code,def f(): my_dict = {}; my_dict.pop('key')
-0.0018299945,-0.045999095,agrammar_code,def f(): my_set = set(); my_set.pop()
-0.0114242975,-0.052377913,agrammar_code,"def f(): my_list = [1, 2, 3]; my_list[4:2] = []"
0.058587365,0.03656094,agrammar_code,def f(): return 5 + 3j % 2
0.0756642,-0.018733783,agrammar_code,def f(): for i in 123: pass
0.09838516,0.01566924,agrammar_code,def f(): yield 1
0.046467606,-0.05014686,agrammar_code,def f(): async def func(): pass; func()
0.023292083,-0.030827448,agrammar_code,"def f(): raise ValueError(""This is an unhandled error"")"
0.051620863,-0.014835973,agrammar_code,"def f(): assert False, ""This assertion will fail"""
0.0901539,0.028276451,agrammar_code,def f(): return 1
0.0825108,0.008762263,agrammar_code,def f(): class = 5
0.073453836,0.015117169,agrammar_code,"def f(): return ""\uqqq"""
0.062200893,-0.007430411,agrammar_code,def f(): for x in None: pass
-0.023891523,-0.06357958,agrammar_code,"def f(): my_tuple = (1, [2, 3]); my_tuple[1][0] = 99"
0.077848434,-0.005808503,agrammar_code,def f(): while True: pass
-0.01397389,-0.05484753,agrammar_code,"def f(): data = []; while True: data.append(""a"" * (10**6))"
0.050406426,-0.053915255,agrammar_code,"def f(): ""你好"".encode(""ascii"")"
0.07453006,0.0111455135,agrammar_code,"def f(): return ""hello"" + 5"
0.053104226,-0.006973583,agrammar_code,"def f(): return [1, 2, 3] * ""a"""
0.052018657,-0.047850788,agrammar_code,"def f(): def func(a, b): pass; func(1)"
0.054107245,-0.038282387,agrammar_code,"def f(): def func(a): pass; func(1, 2)"
-0.02161843,-0.07173046,agrammar_code,"def f(): f = open(""test.txt"", ""w""); f.close(); f.write(""data"")"
0.03297649,-0.015181908,agrammar_code,"def f(): return ""{:q}"".format(10)"
0.06851811,-0.027746648,agrammar_code,def f(): x = 5; x()
-0.024852782,-0.07758361,agrammar_code,"def f(): import re; re.sub(""a"", ""b"", ""abc"", flags=""INVALID"")"
-0.0048132422,-0.032407235,agrammar_code,def f(): my_obj = object(); my_obj.x = 1
-0.0016794462,-0.049147908,agrammar_code,"def f(): my_list = [1, 2, 3]; my_list[1.5]"
0.021526871,-0.050501686,agrammar_code,def f(): d = {'a': 1}; print(d['b'])
-0.010045026,-0.054294683,agrammar_code,"def f(): my_list = [1, 2, 3]; my_list.remove(4)"
0.01650079,-0.040831868,agrammar_code,"def f(): open(""my_directory"", ""r"")"
-0.012748661,-0.06438001,agrammar_code,"def f(): import os; os.remove(""nonexistent_file.txt"")"
-0.00974015,-0.06433701,agrammar_code,"def f(): import os; os.mkdir(""existing_directory"")"
-0.046360705,-0.071096696,agrammar_code,"def f(): class MyClass: def __init__(self, a): self.a = a; MyClass()"
-0.027519586,-0.066063814,agrammar_code,def f(): class A: pass; class B(A): def __init__(self): super().__init__(1)
-0.018336259,-0.06259744,agrammar_code,"def f(): my_tuple = (1, 2, 3); my_tuple[0:1] = (4,)"
0.058640487,-0.023766765,agrammar_code,"def f(): lambda x, y: x + y,"
-0.01110217,-0.0623199,agrammar_code,def f(): my_dict = {1: 'a'}; print(my_dict[[1]])
0.08689178,-0.010635083,agrammar_code,def f(): import .module
0.07884108,0.0073880046,agrammar_code,"def f(): return 'hello"""
0.07589798,0.017388307,agrammar_code,def f(): return 0b123
0.048822448,0.0017312713,agrammar_code,"def f(): return f""Hello {name!"""
-0.0034898862,-0.043737795,agrammar_code,"def f(): return {x: y for x, y in [(1,2), (3,4,5)]}"
0.023823427,-0.044400614,agrammar_code,def f(): class MyClass: pass; MyClass().method()
-0.06411758,-0.069568425,agrammar_code,def f(): class MyClass: def __init__(self): self.__private_var = 1; MyClass().__private_var
0.05779759,-0.009927427,agrammar_code,"def f(): return ""hello""[1.0]"
0.025021989,-0.014929566,agrammar_code,"def f(): list(range(1, 0, -1))"
0.0058747903,-0.046171702,agrammar_code,"def f(): s = {1, 2, 3}; for x in s: s.add(4)"
0.090040274,-0.03032315,agrammar_code,def f(): b'\xzz'
0.064824685,-0.006650982,agrammar_code,"def f(): return f""Hello {{"""
0.0741479,0.02460572,agrammar_code,"def f(): return 1 < ""2"""
0.052344397,-0.029969376,agrammar_code,"def f(): [1, 'a'].sort()"
0.011383512,-0.044678137,agrammar_code,"def f(): my_tuple = (1,); my_tuple += 2"
0.03510815,-0.0493073,agrammar_code,"def f(): my_dict = {[1, 2]: 3}"
0.06414766,0.033188295,agrammar_code,def f(): return 1j << 1
0.06383039,0.01971711,agrammar_code,def f(): return 123.strip()
0.032227125,-0.040610943,agrammar_code,"def f(): open(""file.txt"", ""xyz"")"
0.04930504,-0.0017481274,agrammar_code,def f(): def func(): return 1; func = 5
0.008007523,-0.058986016,agrammar_code,def f(): import threading; import pickle; pickle.dumps(threading.Lock())
0.016767954,-0.043833334,agrammar_code,def f(): def gen(): yield; next(gen()); gen().send(1)
0.039618332,-0.038341887,agrammar_code,"def f(): {x for x in [1,2,3], 4}"
0.050442383,-0.025155941,agrammar_code,"def f(): return [1,2,3] * [4,5,6]"
0.024268845,-0.026012734,agrammar_code,"def f(): raise TypeError(""Intentional Type Error"")"
-0.027182203,-0.03917459,agrammar_code,def f(): def outer(): inner_var = 1; def inner(): return outer_var; return inner(); outer()
0.06881995,-0.02037547,agrammar_code,"def f(): a, *b, c = [1]"
0.075258076,-0.014978784,agrammar_code,"def f(): if ""hello"": pass"
-0.024433088,-0.09495805,agrammar_code,"def f(): import re; re.match(""a(b)c"", ""abc"").group(5)"
0.07485044,-0.0075588687,agrammar_code,def f(): global x; x = 1
0.047304574,-0.036711324,agrammar_code,"def f(): map(1, [1, 2, 3])"
0.042215936,-0.03897548,agrammar_code,"def f(): sum([1, 'a', 3])"
-0.0042055286,-0.05993705,agrammar_code,"def f(): import json; json.dumps(set([1,2,3]))"
0.034548584,-0.039180603,agrammar_code,def f(): import math; math.sqrt(-1)
0.034880713,-0.017146645,agrammar_code,def f(): from my_file import MyClass
0.02981925,-0.05363642,agrammar_code,"def f(): import re; re.compile(""a{1"")"
0.09477731,0.002985074,agrammar_code,def f(): import imp
-0.0139492545,-0.0504209,agrammar_code,def f(): class MyClass: pass; MyClass().non_existent_attr
-0.047404055,-0.04122213,agrammar_code,def f(): class MyClass: pass; obj = MyClass(); obj.some_var()
0.07326847,-0.012897298,agrammar_code,def f(): for x in 123: pass
-0.033791993,-0.045772858,agrammar_code,"def f(): my_list = [1, 2, 3]; print(my_list['0'])"
-0.00217536,-0.051329575,agrammar_code,"def f(): my_string = ""hello""; my_string[0] = 'J'"
-0.0029836872,-0.049469154,agrammar_code,"def f(): my_tuple = (1, 2, 3); del my_tuple[0]"
-0.008022921,-0.061940055,agrammar_code,"def f(): my_dict = {'a': 1}; my_dict.update([('b', 2), 'c'])"
-0.044131596,-0.06709685,agrammar_code,"def f(): class MyClass: @classmethod; def my_method(cls, a): pass; MyClass.my_method()"
-0.03716299,-0.071918495,agrammar_code,"def f(): class MyClass: @staticmethod; def my_method(a): pass; MyClass.my_method(1, 2)"
0.06965799,-0.023349678,agrammar_code,def f(): class A(123): pass
-0.07606853,-0.07950059,agrammar_code,def f(): import abc; class AbstractClass(abc.ABC): @abc.abstractmethod; def my_method(self): pass; AbstractClass().my_method()
-0.06404718,-0.06281359,agrammar_code,"def f(): class Parent: def __init__(self, x): self.x = x; class Child(Parent): def __init__(self): super().__init__(); Child()"
-0.024061125,-0.096694924,agrammar_code,"def f(): import re; re.match(""a(b)c"", ""abc"").group(3)"
0.016733214,-0.05113119,agrammar_code,def f(): import pickle; pickle.loads(b'invalid data')
0.03235102,-0.064265914,agrammar_code,"def f(): zip([1,2], [3,4,5], [6,7,8], [9])"
0.06626536,-0.00089323166,agrammar_code,def f(): [x for x in 123]
-0.028368328,-0.05280252,agrammar_code,def f(): gen = (i for i in range(1)); next(gen); next(gen)
-0.089215875,-0.09101821,agrammar_code,"def f(): from collections import namedtuple; Point = namedtuple('Point', ['x', 'y']); p = Point(1, 2); p.x = 3"
-0.0049800808,-0.047939543,agrammar_code,"def f(): my_list = [1, 2, 3]; my_list[::0]"
0.063994505,0.013389689,agrammar_code,def f(): return b'abc' + 1
0.0033532074,-0.023596307,agrammar_code,"def f(): return bytearray(b'abc') + ""d"""
0.063130885,-0.015682997,agrammar_code,"def f(): ""abc"".count(1)"
0.060528193,-0.027486624,agrammar_code,"def f(): dict([1,2])"
0.028914746,-0.050050918,agrammar_code,def f(): def func(*args): pass; func(**{'a':1})
0.06570347,-0.005863166,agrammar_code,def f(): def gen(): yield from 123
0.016616253,-0.05742472,agrammar_code,"def f(): async def f(): async for i in [1,2,3]: pass"
-0.0065841065,-0.058817398,agrammar_code,def f(): async def f(): async with open('file.txt'): pass
-0.0398477,-0.096128955,agrammar_code,"def f(): import io; s = io.StringIO(""test""); s.write(123)"
0.006248143,-0.036131162,agrammar_code,def f(): class MyClass: pass; MyClass.some_method()
0.029413903,-0.039355565,agrammar_code,"def f(): exec(""raise SyntaxError()"")"
-0.052161768,-0.07089176,agrammar_code,"def f(): class MyClass: __slots__ = ('x',); obj = MyClass(); obj.y = 1"
0.0024987422,-0.06057096,agrammar_code,"def f(): my_dict = {}; my_dict[[1, 2]] = 3"
-0.042608716,-0.08056332,agrammar_code,"def f(): import datetime; datetime.datetime.strptime(""2023-13-01"", ""%Y-%m-%d"")"
-0.033555113,-0.060114443,agrammar_code,"def f(): import json; json.dumps({}, sort_keys=1)"
-0.01771397,-0.06451156,agrammar_code,"def f(): import csv; csv.writer(None, dialect='nonexistent')"
-0.07372523,-0.081476584,agrammar_code,"def f(): import sqlite3; conn = sqlite3.connect(':memory:'); conn.execute(""SELECT * FROM non_existent_table"")"
0.02696006,-0.06498487,agrammar_code,"def f(): import re; re.match(123, ""abc"")"
0.019372234,-0.07975245,agrammar_code,"def f(): import os; os.path.join(""a"", 123)"
-0.07310602,-0.072680615,agrammar_code,"def f(): import xml.etree.ElementTree as ET; ET.fromstring(""<root><item></item>"")"
-0.07352662,-0.0780489,agrammar_code,"def f(): import datetime, pytz; naive = datetime.datetime.now(); aware = pytz.utc.localize(datetime.datetime.now()); aware - naive"
-0.030319734,-0.06584197,agrammar_code,"def f(): import subprocess; subprocess.run(""nonexistent_command_xyz"")"
-0.01783742,-0.057756774,agrammar_code,"def f(): import urllib.request; urllib.request.urlopen(""invalid://url"")"
-0.03920962,-0.06934972,agrammar_code,"def f(): import socket; socket.create_connection(('invalid_host', 80))"
-0.027788343,-0.06044318,agrammar_code,"def f(): import json, io; json.load(io.BytesIO(b'{}'))"
-0.004243948,-0.055402163,agrammar_code,def f(): import hashlib; hashlib.new('nonexistent_alg')
-0.009816478,-0.05867788,agrammar_code,"def f(): import array; array.array('Q', [-1])"
0.011762833,-0.043103296,agrammar_code,def f(): from collections import deque; deque(maxlen=-1)
0.04886256,-0.043626316,agrammar_code,"def f(): import operator; operator.add(""a"", 1)"
0.053080283,-0.03888754,agrammar_code,"def f(): from functools import partial; partial(123, 1)"
0.043054774,-0.040200077,agrammar_code,def f(): import weakref; weakref.ref(1)
-0.045590688,-0.08689694,agrammar_code,def f(): import threading; t = threading.Thread(target=lambda:None); t.start(); t.start()
0.07906731,0.022829438,agrammar_code,"def f(): return 1 + ""2"""
0.06000161,-0.0044321865,agrammar_code,"def f(): return [1, 2, 3][3]"
0.034877952,-0.020806957,agrammar_code,def f(): return {'a': 1}['b']
0.04826903,0.007831396,agrammar_code,def f(): return int('abc')
0.045485754,0.0279236,agrammar_code,def f(): return non_existent_variable
0.052111804,0.03695866,agrammar_code,def f(): return len(None)
0.055553455,-0.028200073,agrammar_code,"def f(): ""hello""[0] = 'H'"
0.0648771,0.0053319745,agrammar_code,"def f(): return [1, 2] + 3"
0.05325588,-0.006253489,agrammar_code,def f(): import non_existent_module
-0.0076651433,-0.060242053,agrammar_code,"def f(): open(""non_existent_file.txt"", ""r"").read()"
0.0068399706,-0.050939765,agrammar_code,"def f(): open(""/dev/null"", ""w"").write(123)"
-0.011212005,-0.06843301,agrammar_code,"def f(): import json; json.loads(""{'key': 'value'"")"
0.073402196,0.04178817,agrammar_code,def f(): return None * 2
0.069339894,0.02026783,agrammar_code,def f(): return 1..method()
0.07804245,-0.026505642,agrammar_code,"def f(): a, b = (1,)"
0.043083217,0.035701983,agrammar_code,def f(): return unassigned_var
0.02705544,-0.012481814,agrammar_code,def f(): def recurse(): return recurse(); recurse()
0.021876687,-0.010565257,agrammar_code,def f(): return [i for i in range(10**1000)]
0.033603843,-0.055725012,agrammar_code,def f(): s = frozenset([1]); s.remove(1)
0.03708893,-0.046747684,agrammar_code,"def f(): import re; re.compile(""*"")"
0.045607723,0.00083576905,agrammar_code,"def f(): return eval(""1 +"")"
0.03431813,-0.008247659,agrammar_code,def f(): return 2**999999999999999
0.04831254,-0.011695962,agrammar_code,def f(): return [0] * (10**100000000)
0.008339185,-0.049950305,agrammar_code,"def f(): my_tuple = (1,); my_tuple[0] = 2"
-0.021201639,-0.07484159,agrammar_code,"def f(): f = open(""temp.txt"", ""w""); f.close; f.write(""data"")"
0.04265472,-0.022297658,agrammar_code,def f(): import circular_import_test_a
0.045847915,-0.010788544,agrammar_code,def f(): print(unknown_var)
0.030770369,-0.038205616,agrammar_code,def f(): class MyClass: pass; MyClass.attr
0.07313983,-0.023478925,agrammar_code,def f(): [].pop()
0.05047569,-0.029276557,agrammar_code,def f(): {}.pop('key')
0.051954124,-0.011031266,agrammar_code,def f(): set().pop()
0.05351142,-0.034232195,agrammar_code,"def f(): [1, 2][3:1] = []"
0.05828862,0.041740473,agrammar_code,def f(): return 1 + 2j % 1
0.046238113,-0.025432572,agrammar_code,"def f(): for i in ""abc"": pass else: pass"
0.09838517,0.01566924,agrammar_code,def f(): yield 1
0.0427017,-0.049461313,agrammar_code,def f(): async def func(): await; func()
0.0045342976,-0.023261877,agrammar_code,"def f(): raise ValueError(""error"") from None"
0.080731265,0.01607581,agrammar_code,def f(): assert False
0.0901539,0.028276451,agrammar_code,def f():  return 1
0.08701954,0.005909759,agrammar_code,def f(): del = 1
0.077203944,0.022892047,agrammar_code,"def f(): return ""\xgg"""
0.050084587,-0.019999942,agrammar_code,def f(): for x in []: break else: pass
0.0053334925,-0.05450155,agrammar_code,"def f(): my_tuple = (1, [2]); my_tuple[1] = 3"
0.077848434,-0.005808503,agrammar_code,def f(): while True: pass
-0.009269829,-0.05099557,agrammar_code,"def f(): data = []; while True: data.append(""A"" * 10**9)"
0.047124203,-0.053810388,agrammar_code,"def f(): ""你好"".encode(""latin-1"")"
0.0799426,0.024435144,agrammar_code,"def f(): return ""a"" / 2"
0.07415371,0.020717451,agrammar_code,"def f(): return [1] * ""a"""
0.056404103,-0.04209584,agrammar_code,def f(): def func(a): pass; func()
0.060469687,-0.034813706,agrammar_code,def f(): def func(): pass; func(1)
-0.009873633,-0.07359701,agrammar_code,"def f(): f = open(""test.txt"", ""w""); f.close(); f.read()"
0.032744605,-0.014537841,agrammar_code,"def f(): return ""{:z}"".format(1)"
0.0673855,-0.024366032,agrammar_code,def f(): x = 1; x()
-0.008868082,-0.0898573,agrammar_code,"def f(): import re; re.match(""a"", ""b"", flags=123)"
0.047001608,-0.014872896,agrammar_code,def f(): object().attr = 1
0.0834525,-0.012624657,agrammar_code,def f(): [1][0.5]
0.04430021,-0.043506905,agrammar_code,def f(): d = {}; d['key']
0.07479096,-0.012912546,agrammar_code,def f(): [1].remove(2)
0.04885859,-0.033361316,agrammar_code,"def f(): open(""/"", ""r"")"
0.046347875,-0.050955974,agrammar_code,"def f(): import os; os.remove(""/"")"
0.038598098,-0.06423194,agrammar_code,"def f(): import os; os.mkdir(""/etc"")"
-0.024429735,-0.06468777,agrammar_code,def f(): class MyClass: def __init__(self): pass; MyClass(1)
-0.039300386,-0.07050855,agrammar_code,"def f(): class A: pass; class B(A): def __init__(self): super(B, self).__init__(1)"
0.013789831,-0.053748082,agrammar_code,"def f(): my_tuple = (1, 2); my_tuple += (3, 4)"
0.058640495,-0.02376676,agrammar_code,"def f(): lambda x, y: x + y,"
0.059633136,-0.03574507,agrammar_code,def f(): {1: 'a'}[[1]]
0.100183815,-0.012432278,agrammar_code,def f(): from . import
0.08161038,0.009925943,agrammar_code,"def f(): return ""hello'"
0.07833206,0.02675407,agrammar_code,def f(): return 0b1012
0.04882245,0.0017312698,agrammar_code,"def f(): return f""Hello {name!"""
0.018171871,-0.053628866,agrammar_code,"def f(): {x: y for x, y in [(1,2), (3,)]}"
0.012849435,-0.039000623,agrammar_code,def f(): class MyClass: pass; MyClass.static_method()
-0.0667731,-0.073472716,agrammar_code,def f(): class MyClass: def __init__(self): self._MyClass__private = 1; MyClass().__private
0.07058965,-0.023752054,agrammar_code,"def f(): ""abc""[1.0]"
0.028969448,-0.002772042,agrammar_code,"def f(): list(range(1, 0))"
0.007269381,-0.040222656,agrammar_code,"def f(): s = {1, 2}; for x in s: s.clear()"
0.06975522,-0.026913876,agrammar_code,def f(): b'\x00\x00'
0.064824685,-0.0066509815,agrammar_code,"def f(): return f""Hello {{"""
0.06618214,0.020931745,agrammar_code,"def f(): return 1 == ""1"""
0.04596086,-0.033866167,agrammar_code,"def f(): [1, 2, 'a'].sort()"
0.01611986,-0.041805703,agrammar_code,"def f(): my_tuple = (1,); my_tuple + 2"
0.0724498,-0.018251512,agrammar_code,def f(): {[1]: 1}
0.075609736,0.039482348,agrammar_code,def f(): return 1j + 1
0.059490334,-0.0045399135,agrammar_code,def f(): 1..isdigit()
0.029469054,-0.038788397,agrammar_code,"def f(): open(""file.txt"", ""rx"")"
0.05637366,-0.036684144,agrammar_code,def f(): func = 1; def func(): pass
0.016533347,-0.04581414,agrammar_code,def f(): import pickle; pickle.dumps(lambda: None)
0.0011366353,-0.039872512,agrammar_code,def f(): def gen(): yield; next(gen()); gen().throw(Exception)
0.048408676,-0.020014433,agrammar_code,"def f(): {x for x in 1,2,3}"
0.085251026,0.032592952,agrammar_code,def f(): return [1] + 1
0.07130823,0.017317083,agrammar_code,def f(): raise TypeError
-0.00494094,-0.042655397,agrammar_code,def f(): def outer(): x=1; def inner(): return y; inner(); outer()
0.057593748,-0.029495573,agrammar_code,"def f(): a, *b, c = [1, 2]"
0.06447122,-0.0013687375,agrammar_code,def f(): if 1: pass else: pass
-0.027775906,-0.09405676,agrammar_code,"def f(): import re; re.match(""a(b)c"", ""abc"").group(0)"
0.069368064,-0.01728051,agrammar_code,def f(): x = 1; global x
0.045296833,-0.031179795,agrammar_code,"def f(): map(lambda x: x, 1)"
0.042250145,-0.03600517,agrammar_code,"def f(): sum([1, 2, '3'])"
0.010356775,-0.045421343,agrammar_code,def f(): import json; json.dumps(lambda: None)
0.03488993,-0.029888313,agrammar_code,def f(): import math; math.log(-1)
0.076778404,-0.017120423,agrammar_code,def f(): from os.path import
0.03406591,-0.051299516,agrammar_code,"def f(): import re; re.compile(""a{"")"
0.07247475,0.009754649,agrammar_code,def f(): import StringIO
0.06148426,-0.013382181,agrammar_code,def f(): object().attr
-0.024167174,-0.041236274,agrammar_code,def f(): class MyClass: pass; obj = MyClass(); obj.method()
0.07185858,-0.00428834,agrammar_code,def f(): for x in 1: pass
0.07637898,-0.02012313,agrammar_code,def f(): [1]['0']
0.00035038567,-0.054568302,agrammar_code,"def f(): my_string = ""hi""; my_string[0] = 'H'"
0.008652759,-0.04511728,agrammar_code,"def f(): my_tuple = (1,); del my_tuple[0]"
0.05197712,-0.04131701,agrammar_code,def f(): {'a':1}.update(1)
-0.008988693,-0.065968715,agrammar_code,def f(): class C: @classmethod; def m(cls): pass; C.m(1)
0.00047946858,-0.07061997,agrammar_code,def f(): class C: @staticmethod; def m(): pass; C.m(1)
0.034214478,-0.021412225,agrammar_code,def f(): class A(unknown_base): pass
-0.042598024,-0.079024374,agrammar_code,def f(): import abc; class A(abc.ABC): @abc.abstractmethod; def m(self): pass; A().m()
-0.040002804,-0.06039558,agrammar_code,"def f(): class P: def __init__(self): pass; class C(P): def __init__(self): super(P, self).__init__()"
-0.0032583212,-0.08849795,agrammar_code,"def f(): import re; re.match(""a"", ""b"").group(1)"
0.040409002,-0.050187018,agrammar_code,def f(): import pickle; pickle.loads(b'')
0.07575372,-0.01816438,agrammar_code,"def f(): zip(1,2)"
0.0623728,0.0033134022,agrammar_code,def f(): [x for x in 1]
-0.028368328,-0.05280252,agrammar_code,def f(): gen = (i for i in range(1)); next(gen); next(gen)
-0.08139169,-0.08762107,agrammar_code,"def f(): from collections import namedtuple; Point = namedtuple('Point', 'x y'); p = Point(1, 2); p.x = 3"
0.07647694,-0.016327245,agrammar_code,def f(): [1][::0]
0.083188444,-0.013387064,agrammar_code,def f(): b'a' + 1
0.022685686,-0.034913056,agrammar_code,"def f(): bytearray(b'a') + ""b"""
0.047940426,-0.020356417,agrammar_code,"def f(): ""a"".count(b'a')"
0.05154045,-0.03609458,agrammar_code,"def f(): dict([(1,)])"
0.03653737,-0.0451029,agrammar_code,def f(): def func(*args): pass; func(**{1:1})
0.06241742,-0.0031019275,agrammar_code,def f(): def gen(): yield from 1
0.032502715,-0.040280417,agrammar_code,def f(): async def f(): async for i in 1: pass
0.04562952,-0.03752641,agrammar_code,def f(): async def f(): async with 1: pass
-0.047290187,-0.09146452,agrammar_code,"def f(): import io; s = io.StringIO(""a""); s.write(b'b')"
0.060666017,-0.025911499,agrammar_code,def f(): MyClass.method()
0.0376652,-0.046547502,agrammar_code,"def f(): exec(""def f(): pass"")"
-0.0013190144,-0.059722807,agrammar_code,def f(): class C: __slots__=(); C().x = 1
0.072483785,-0.023016859,agrammar_code,def f(): {[]: 1}
-0.04185221,-0.078708895,agrammar_code,"def f(): import datetime; datetime.datetime.strptime(""2023-01-01"", ""%y-%m-%d"")"
-0.03379723,-0.06536443,agrammar_code,"def f(): import json; json.dumps({}, sort_keys=""a"")"
-0.013402591,-0.06744898,agrammar_code,"def f(): import csv; csv.writer(None, delimiter=b',')"
-0.04234913,-0.096910685,agrammar_code,def f(): import sqlite3; conn = sqlite3.connect(':memory:'); conn.execute(1)
0.03697482,-0.065981925,agrammar_code,"def f(): import re; re.match(""a"", 1)"
0.010245992,-0.06759671,agrammar_code,"def f(): import os; os.path.join(1, ""a"")"
-0.072400376,-0.07151457,agrammar_code,"def f(): import xml.etree.ElementTree as ET; ET.fromstring(""<root><item></item"")"
-0.059804223,-0.06603048,agrammar_code,"def f(): import datetime, pytz; datetime.datetime.now(pytz.utc) - datetime.datetime.now()"
0.04807888,-0.043621104,agrammar_code,def f(): import subprocess; subprocess.run(123)
0.0059299073,-0.058045454,agrammar_code,"def f(): import urllib.request; urllib.request.urlopen(""http://"")"
0.024103923,-0.04510165,agrammar_code,def f(): import socket; socket.create_connection(123)
-0.05289335,-0.08757732,agrammar_code,"def f(): import json, io; json.load(io.StringIO(""{}"", encoding='utf-8'))"
0.036713015,-0.040041957,agrammar_code,def f(): import hashlib; hashlib.new(123)
-0.017583823,-0.06464603,agrammar_code,"def f(): import array; array.array('i', [2**31])"
0.013425243,-0.04526582,agrammar_code,def f(): from collections import deque; deque(maxlen=0.5)
0.050835785,-0.039007932,agrammar_code,"def f(): import operator; operator.add(1, ""a"")"
